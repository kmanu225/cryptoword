from Crypto.PublicKey import RSA
from Crypto.Random import get_random_bytes
from Crypto.Util.number import long_to_bytes, bytes_to_long

# Assuming p and q are your primes
p = 240235037993086647490360091251920509660926008787784163933134217892938306866733942789677346753386227305733054945882967240289722901543973488715609201686292184661845932338700104193843036687863902362262743558762135191383008370605906319072352806840967443808455667223189470493469726348267326087313303773058894562037 # your p value
q = 273067835270880086905225991495379768025497181071655465691068234751894433419924689398578343149876505032891110212422075482294849988417876098468455656340271714411918145829343178315564694346337087829483997746033122936265729805143582391157953230943745740375876718066059315171626227510845447370568918599985468283447 # your q value

e = 0xF70B3BD74801A25ECCBDE24E01B077677E298391D4197B099A6F961244F04314DA7DE144DD69A8AA84686BF4DDBD14A6344BBC315218DBBAF29490A44E42E5C4A2A4E76B8101A5CA82351C07B4CFD4E08038C8D5573A827B227BCE515B70866724718EC2AC03359614CDF43DD88F1AC7EE453917975A13C019E620E531207692224009C75EAEF11E130F8E54CCE31E86C84E9366219AE5C250853BE145EA87DCF37AA7ECE0A994195885E31EBCD8FE742DF1CD1370C95B6684AB6C37E84762193C27DD34C3CF3F5E69957B8338F9143A0052C9381D9E2ECB9EF504C954B453F57632705ED44B28A4B5CBE61368E485DA6AF2DFC901E45868CDD5006913F338A3

d = 5381228493848881413720861860088084031565764565757312238397645291788450924186173990654586679199909846561378831388735501902424890776718740657080660272298531
# Create a key with the public key (e, n) and the private key (d, n)
key = RSA.construct((p*q, e, d, p, q)) # 65537 is a common value for e

# Get the private key
private_key = key.exportKey()
with open("./private.pem", "wb") as f:
    f.write(private_key)

# Get the public key
public_key = key.publickey().exportKey()
with open("./public.pem", "wb") as f:
    f.write(public_key)

print("Private Key: ", private_key)
print("Public Key: ", public_key)
